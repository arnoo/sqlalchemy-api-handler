#!/bin/bash

set -o nounset

# =============================================
#  Global config of the application
# =============================================

export COMMAND_NAME="sqlaah"
export DB_NAME="sqlalchemy_api_handler"
export GITHUB_NAME="betagouv/sqlalchemy-api-handler"
export MODULE_NAME="sqlalchemy_api_handler"
export PIP_NAME="SQLAlchemy-Api-Handler"

# =============================================
#  Helper that describes all functionalities
# =============================================

if [[ $# -eq 0 ]] || [[ "$1" == "-h" ]]; then
    echo "$(basename "$0") [-h] [-e env -b backend -f file c] -- program to deal with Pass Culture ecosystem
where:
    -h  show this help text"
    exit 0
fi

# =============================================
# Get script parameters
# =============================================

if [[ $# -gt 2 ]] && [[ "$1" == "-e" ]]; then
  ENV=$2
  shift 2
else
  ENV=${ENV:-'development'}
fi

CMD="$1"
shift

# Build the docker images
if [[ "$CMD" == "build" ]]; then
  RUN='docker-compose build $*'

# Connect to Postgresql database in command line using psql
elif [[ "$CMD" == "psql" ]]; then
	COLUMNS=${COLUMNS:-''};
	if [[ "$ENV" == "development" ]]; then
		RUN='docker exec -it $COMMAND_NAME-postgres bash -c "COLUMNS=\"'$COLUMNS'\" psql -U '$DB_NAME'_user '$DB_NAME' $*"'
	else
		scalingo -a "$SCALINGO_APP" pgsql-console
		exit
	fi

# Publish package to test PyPi
elif [[ "$CMD" == "prepublish" ]]; then
  VERSION=$(./$COMMAND_NAME version);
  RUN='docker exec -it $COMMAND_NAME-flask bash -c "cd /opt/services/flaskapp &&
    rm -rf build &&
    rm -rf dist &&
    PYTHONPATH=. python setup.py sdist bdist_wheel &&
    sleep 1 &&
    twine check dist/$PIP_NAME-$VERSION.tar.gz &&
    twine upload --repository-url https://test.pypi.org/legacy/ dist/*"'

# Publish package to PyPi
elif [[ "$CMD" == "publish" ]]; then
  RUN='docker exec -it $COMMAND_NAME-flask bash -c "cd /opt/services/flaskapp &&
    PYTHONPATH=. twine upload dist/*"'

# Force docker-compose to build the docker images
elif [[ "$CMD" == "rebuild" ]]; then
  RUN='docker-compose build --no-cache $*'

# Restart API after removing the database and files
elif [[ "$CMD" == "restart" ]]; then
  RUN='rm -rf docker_data;
       docker-compose down --volumes;
       docker-compose up --force-recreate'

# Start with database
elif [[ "$CMD" == "start" ]]; then
  RUN='docker-compose up $*'

# Run tests for API
# Need start-backend to be successful and delete all data
elif [[ "$CMD" == "test" ]]; then
  if [[ $# == 0 ]]; then
    PYTEST_ARGS="tests"
  else
    PYTEST_ARGS=$*
  fi
  RUN='docker exec $COMMAND_NAME-flask bash -c "cd /opt/services/flaskapp && PYTHONPATH=. pytest --color=yes -rsx -v $PYTEST_ARGS"'

# Get the last version of the library
elif [[ "$CMD" == "version" ]]; then
  RUN='docker exec $COMMAND_NAME-flask bash -c "cd /opt/services/flaskapp && PYTHONPATH=. python -c \"import $MODULE_NAME; print($MODULE_NAME.__version__)\""'
  eval $RUN
  exit 0
fi

# =============================================
# Execute command
# =============================================

echo $RUN
eval $RUN
